package cn.gdlgxy.WXDemo4Polymorphism;

import cn.gdlgxy.BasicClass.Student;

/*
一个对象拥有多种形态，这就是对象的多态性。
代码中体现多态性，其实就是一句话：父类引用指向子类对象
格式：  父类名称 对象名 = new 子类名称（）  或是
       接口名称 对象名 = new 实现类名称（）

成员方法访问规则：new的是谁，就优先用谁，没有则向上找
                编译看左边，运行看右边。


1.对象的向上转型，其实就是多态写法：
格式：父类名称 对象名 = new 子类名称（）
含义：右侧创建一个子类对象，把它当做父类来看待使用。
备注：向上转型一定是安全的，正确的，但是也有一个弊端，无法调用子类原本特有的方法。

解决方法：
对象的向下转型：是一个还原的动作
格式：子类名称 对象名 = （子类名称）父类对象;
含义：将父类对象还原成本来的子类对象。

对象 instanceof 类名称
这将会得到一个布尔值，也就是判断前面的对象能不能当做后面类型的实例。
 */
public class Demo04Polymorphic {


}
